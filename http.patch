commit 0e75edb5a314fd2b8b977432d534ebe4027da548
Author: Todd Jeffreys <tjeffreys@google.com>
Date:   Wed Jul 27 20:29:48 2016 +0000

    Add file:// support to bazel's new_http_archive rule.
    
    This modifies HttpConnection.java to support other URLConnections besides
    simply HttpURLConnection. Supporting at least file://, and possibly ftp:// in
    theory.
    
    In the absence of AAR android support, this allows me to import a Google Play Services AAR library using a combination of new_http_archive from file://$ANDROID_SDK/... and a custom BUILD file that repackages it via android_library.
    
    I added a check against zero-sized files, but I'm not 100% sure it's required.
    
    --
    MOS_MIGRATED_REVID=128621789

diff --git a/src/main/java/com/google/devtools/build/lib/bazel/repository/downloader/HttpConnection.java b/src/main/java/com/google/devtools/build/lib/bazel/repository/downloader/HttpConnection.java
index 7005fbb..b1577f1 100644
--- a/src/main/java/com/google/devtools/build/lib/bazel/repository/downloader/HttpConnection.java
+++ b/src/main/java/com/google/devtools/build/lib/bazel/repository/downloader/HttpConnection.java
@@ -18,7 +18,6 @@ import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Optional;
 import com.google.common.io.ByteStreams;
 import com.google.common.net.MediaType;
-
 import java.io.Closeable;
 import java.io.IOException;
 import java.io.InputStream;
@@ -26,6 +25,7 @@ import java.net.HttpURLConnection;
 import java.net.MalformedURLException;
 import java.net.Proxy;
 import java.net.URL;
+import java.net.URLConnection;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.util.Map;
@@ -74,10 +74,26 @@ class HttpConnection implements Closeable {
 
   public static HttpConnection createAndConnect(URL url, Map<String, String> clientEnv)
       throws IOException {
-    int retries = MAX_REDIRECTS;
     Proxy proxy = ProxyHelper.createProxyIfNeeded(url.toString(), clientEnv);
-    do {
-      HttpURLConnection connection = (HttpURLConnection) url.openConnection(proxy);
+    URLConnection connection = url.openConnection(proxy);
+    if (connection instanceof HttpURLConnection) {
+      return createAndConnectViaHttp(proxy, url, (HttpURLConnection) connection);
+    }
+
+    int contentLength = connection.getContentLength();
+    // check for empty file. -1 is a valid contentLength, meaning the size of unknown. It's a
+    // common return value for an FTP download request for example. Local files will always
+    // have a valid contentLength value.
+    if (contentLength == 0) {
+      throw new IOException("Attempted to download an empty file");
+    }
+    return new HttpConnection(connection.getInputStream(), contentLength);
+  }
+
+  private static HttpConnection createAndConnectViaHttp(
+      Proxy proxy, URL url, HttpURLConnection connection) throws IOException {
+    int retries = MAX_REDIRECTS;
+    for (int i = 0; i < retries; ++i, connection = (HttpURLConnection) url.openConnection(proxy)) {
       try {
         connection.connect();
       } catch (IllegalArgumentException e) {
@@ -96,12 +112,14 @@ class HttpConnection implements Closeable {
         case -1:
           throw new IOException("An HTTP error occured");
         default:
-          throw new IOException(String.format("%s %s: %s",
-              connection.getResponseCode(),
-              connection.getResponseMessage(),
-              readBody(connection)));
+          throw new IOException(
+              String.format(
+                  "%s %s: %s",
+                  connection.getResponseCode(),
+                  connection.getResponseMessage(),
+                  readBody(connection)));
       }
-    } while (retries-- > 0);
+    };
     throw new IOException("Maximum redirects (" + MAX_REDIRECTS + ") exceeded");
   }
 
diff --git a/src/test/java/com/google/devtools/build/lib/bazel/repository/downloader/HttpConnectionTest.java b/src/test/java/com/google/devtools/build/lib/bazel/repository/downloader/HttpConnectionTest.java
index 9f84ea8..93d9f61 100644
--- a/src/test/java/com/google/devtools/build/lib/bazel/repository/downloader/HttpConnectionTest.java
+++ b/src/test/java/com/google/devtools/build/lib/bazel/repository/downloader/HttpConnectionTest.java
@@ -15,22 +15,24 @@
 package com.google.devtools.build.lib.bazel.repository.downloader;
 
 import static com.google.common.truth.Truth.assertThat;
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.when;
 
+import com.google.common.collect.ImmutableMap;
+import com.google.common.io.ByteStreams;
 import com.google.common.net.MediaType;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.JUnit4;
-import org.mockito.Mockito;
-
+import java.io.File;
+import java.io.FileOutputStream;
 import java.io.IOException;
 import java.net.HttpURLConnection;
 import java.nio.charset.Charset;
-import java.nio.charset.StandardCharsets;
 import java.util.Map;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+import org.mockito.Mockito;
 
 /**
  * Tests for @{link HttpConnection}.
@@ -70,7 +72,7 @@ public class HttpConnectionTest {
     HttpURLConnection connection = Mockito.mock(HttpURLConnection.class);
     when(connection.getContentType()).thenReturn(MediaType.HTML_UTF_8.toString());
     Charset charset = HttpConnection.getEncoding(connection);
-    assertEquals(StandardCharsets.UTF_8, charset);
+    assertEquals(UTF_8, charset);
   }
 
   @Test
@@ -89,6 +91,48 @@ public class HttpConnectionTest {
   public void testNoEncodingNorContentType() throws Exception {
     HttpURLConnection connection = Mockito.mock(HttpURLConnection.class);
     Charset charset = HttpConnection.getEncoding(connection);
-    assertEquals(StandardCharsets.UTF_8, charset);
+    assertEquals(UTF_8, charset);
+  }
+
+  /**
+   * Creates a temporary file with the specified {@code fileContents}. The file will be
+   * automatically deleted when the JVM exits.
+   *
+   * @param fileContents the contents of the file
+   * @return the {@link File} object representing the temporary file
+   */
+  private static File createTempFile(byte[] fileContents) throws IOException {
+    File temp = File.createTempFile("httpConnectionTest", ".tmp");
+    temp.deleteOnExit();
+    try (FileOutputStream outputStream = new FileOutputStream(temp)) {
+      outputStream.write(fileContents);
+    }
+    return temp;
+  }
+
+  @Test
+  public void testLocalFileDownload() throws Exception {
+    byte[] fileContents = "this is a test".getBytes(UTF_8);
+    File temp = createTempFile(fileContents);
+    HttpConnection httpConnection =
+        HttpConnection.createAndConnect(temp.toURI().toURL(), ImmutableMap.<String, String>of());
+
+    assertThat(httpConnection.getContentLength()).isEqualTo(fileContents.length);
+
+    byte[] readContents = ByteStreams.toByteArray(httpConnection.getInputStream());
+    assertThat(readContents).isEqualTo(fileContents);
+  }
+
+  @Test
+  public void testLocalEmptyFileDownload() throws Exception {
+    byte[] fileContents = new byte[0];
+    // create a temp file
+    File temp = createTempFile(fileContents);
+    try {
+      HttpConnection.createAndConnect(temp.toURI().toURL(), ImmutableMap.<String, String>of());
+      fail("Expected exception");
+    } catch (IOException ex) {
+      // expected
+    }
   }
 }
